/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    private static boolean checkArguments(String[] args) {
        if (args.length < 1)
            return false;
        int arguments = 1;
        for (int i = 0; i < args[0].length(); i++) {
            char shape = args[0].charAt(i);
            switch (shape) {
                case 'c':
                    arguments += 5;
                    break;
                case 'o':
                case 'p':
                case 's':
                    arguments++;
                    break;
                default:
                    return false;
            }
        }
        return args.length == arguments;
    }

    private static double strToDouble(String str) {
        try {
            double n = Double.parseDouble(str);
            if (n < (double) 0)
                throw new IllegalArgumentException("" + n + " liczba spoza zakresu");
            return n;
        } catch (NumberFormatException ex) {
            throw new IllegalArgumentException(str + " nie jest liczba");
        }
    }

    private static void printOutput(Shapes shape) {
        System.out.format("	ma pole równe: " + "%10.2f%n", shape.area());
        System.out.format("	oraz obwód równy: " + "%10.2f%n", shape.perimeter());
    }

    private static boolean ArgsToDouble(double[] arguments, String[] args) {
        try {
            for (int i = 0; i < args.length - 1; i++) {
                arguments[i] = strToDouble(args[i + 1]);
            }
        } catch (IllegalArgumentException ex) {
            System.out.println(ex.getMessage());
            return false;
        }
        return true;
    }

    private static Shapes choseQuadrilateral(double a, double b, double c, double d, double angle) {
        Shapes shape;
        if (angle > 180) {
            System.out.println("* Kąt " + angle + " nie jest poprawną wartością ");
            return null;
        }
        if (angle == 90) {
            if (a == b && b == c && c == d) {
                shape = new Shapes(Shapes.Unary.SQUARE, a);
                System.out.println("* Kwadrat o boku " + a);
            } else {
                if (a == b && c == d)
                    b = c;
                else {
                    if (!(a == c && b == d || a == d && b == c)) {
                        System.out.println("* Czworokąt o bokach: " + a + ", " + b + ", " +
                                c + ", " + d + " to nie jest dobra figura");
                        return null;
                    }
                }
                shape = new Shapes(Shapes.Binary.RECTANGLE, a, b);
                System.out.println("* Prostokąt o bokach " + a + " i " + b);
            }
        } else {
            if (a == b && b == c && c == d) {
                shape = new Shapes(Shapes.Binary.RHOMBUS, a, Math.toRadians(angle));
                System.out.println("* Romb o boku " + a + " i kącie " + angle);
            } else {
                System.out.println("* Czworokąt o bokach: " + a + ", " + b + ", " +
                        c + ", " + d + " oraz kącie " + angle + " to nie jest dobra figura");
                return null;
            }
        }
        return shape;
    }

    public static void main(String[] args) {
        if (!checkArguments(args)) {
            System.out.println("Niepoprawne argumenty");
            return;
        }
        int pointer = 0;
        int numOfShapes = args[0].length();
        double[] arguments = new double[args.length - 1];
        Shapes[] shapes = new Shapes[numOfShapes];

        if (!ArgsToDouble(arguments, args))
            return;

        for (int i = 0; i < numOfShapes; i++) {
            char shape = args[0].charAt(i);
            switch (shape) {
                case 'c':
                    shapes[i] = choseQuadrilateral(arguments[pointer], arguments[pointer + 1],
                            arguments[pointer + 2], arguments[pointer + 3], arguments[pointer + 4]);
                    if (shapes[i] == null)
                        return;
                    pointer += 4;
                    break;
                case 'o':
                    shapes[i] = new Shapes(Shapes.Unary.CIRCLE, arguments[pointer]);
                    System.out.println("* Koło o promieniu " + arguments[pointer]);
                    break;
                case 'p':
                    shapes[i] = new Shapes(Shapes.Unary.PENTAGON, arguments[pointer]);
                    System.out.println("* Pięciokąt o boku " + arguments[pointer]);
                    break;
                case 's':
                    shapes[i] = new Shapes(Shapes.Unary.HEXAGON, arguments[pointer]);
                    System.out.println("* Sześciokąt o boku " + arguments[pointer]);
                    break;
            }
            printOutput(shapes[i]);
            pointer++;
        }
    }
}
